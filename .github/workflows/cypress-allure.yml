
name: Cypress E2E with Allure

on:
  push:
    branches: [ main ]
  pull_request:

jobs:
  e2e:
    runs-on: ubuntu-latest
    steps:
      - name: Checkout repository
        uses: actions/checkout@v4
        with:
          fetch-depth: 0

      - name: Set up Docker Compose and start services
        run: |
          docker-compose up -d --build

      - name: Wait for services to be ready
        run: |
          set -e
          for i in $(seq 1 60); do
            if curl -sSf http://localhost:8001/ >/dev/null 2>&1; then
              echo "Service ready"
              break
            fi
            echo "waiting... ($i)"
            sleep 2
          done

      - name: Setup Node.js
        uses: actions/setup-node@v4
        with:
          node-version: 18

      - name: Install dependencies
        run: npm ci

      - name: Run Cypress tests (with Allure)
        env:
          CYPRESS_baseUrl: http://localhost:8002
        run: |
          mkdir -p allure-results
          npx cypress run --browser chrome --config video=false --env allure=true

      - name: Generate Allure report
        run: npx allure generate allure-results -o allure-report --clean

      - name: Install Puppeteer for screenshot
        run: npm install puppeteer --no-save

      - name: Screenshot Allure report (preview)
        run: |
          node -e "(async()=>{const puppeteer=require('puppeteer'); const path=require('path'); const file='file://'+path.resolve('allure-report','index.html'); const browser=await puppeteer.launch({args:['--no-sandbox','--disable-setuid-sandbox']}); const page=await browser.newPage(); await page.setViewport({width:1200,height:900}); await page.goto(file,{waitUntil:'networkidle2'}); await page.screenshot({path:'allure-report/preview.png',fullPage:true}); await browser.close();})().catch(e=>{console.error(e); process.exit(0);});"

      - name: Upload Allure report as artifact
        if: always()
        uses: actions/upload-artifact@v4
        with:
          name: allure-report-${{ github.run_id }}
          path: ./allure-report

      - name: Comment PR with Allure artifact link
        if: github.event_name == 'pull_request'
        uses: actions/github-script@v6
        with:
          github-token: ${{ secrets.GITHUB_TOKEN }}
          script: |
            const fs = require('fs');
            const { owner, repo } = context.repo;
            const pr = context.payload.pull_request.number;
            const runId = context.runId;
            const artifactName = `allure-report-${runId}`;
            const runUrl = `https://github.com/${owner}/${repo}/actions/runs/${runId}`;
            let body = `Allure report for this PR was uploaded as an artifact named **${artifactName}**. Download it from the Actions run: ${runUrl} (see the "Artifacts" section).`;
            try {
              const img = fs.readFileSync('allure-report/preview.png', {encoding: 'base64'});
              body = `Allure report preview:\n\n![Allure preview](data:image/png;base64,${img})\n\n` + body;
            } catch (err) {
              // if screenshot missing, just post the link
              console.warn('preview image not found', err && err.message);
            }
            // Attempt to find the uploaded artifact for this run and include a direct artifact link
            try {
              const res = await github.rest.actions.listWorkflowRunArtifacts({ owner, repo, run_id: runId });
              const artifacts = res.data && res.data.artifacts ? res.data.artifacts : [];
              const art = artifacts.find(a => a.name === artifactName);
              if (art) {
                const artifactUrl = `https://github.com/${owner}/${repo}/suites/${runId}/artifacts/${art.id}`;
                body += `\n\nDirect artifact download: ${artifactUrl}`;
              }
            } catch (err) {
              console.warn('could not list artifacts', err && err.message);
            }
            await github.issues.createComment({ owner, repo, issue_number: pr, body });

      - name: Upload artifacts
        if: always()
        uses: actions/upload-artifact@v4
        with:
          name: cypress-allure-artifacts
          path: |
            allure-report/**
            allure-results/**
            cypress/screenshots/**
            cypress/videos/**

      - name: Tear down docker-compose
        if: always()
        run: docker-compose down -v
